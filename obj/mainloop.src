; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAINLOOP.C"
	.assume ADL=1
	SEGMENT DATA
_tmp_pxl_x_offset:
	DW	0
	DB	0
_tmp_pxl_y_offset:
	DW	0
	DB	0
_p_pxl_x:
	DW	100
	DB	0
_p_pxl_y:
	DW	100
	DB	0
_walking:
	DW	0
	DB	0
_walkstep:
	DW	3
	DB	0
_frames:
	DW	0
	DB	0
_framemax:
	DW	16
	DB	0
	SEGMENT BSS
_godown:
	DS	3
_goleft:
	DS	3
_goup:
	DS	3
_goright:
	DS	3
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	
;    6	#include <math.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	#include <fileioc.h>
;   11	#include <graphx.h>
;   12	#include <keypadc.h>
;   13	
;   14	#include "main.h"
;   15	#include "gfx/tiles_gfx.h"
;   16	#include "gfx/archero_gfx.h"
;   17	#include "mainloop.h"
;   18	#include "structs.h"
;   19	#include "projectiles.h"
;   20	#include "p_collision.h"
;   21	
;   22	//tilemap pixel offsets
;   23	int tmp_pxl_x_offset = 0;
;   24	int tmp_pxl_y_offset = 0;
;   25	
;   26	//player screen coordinates in pixels
;   27	int p_pxl_x = 100;
;   28	int p_pxl_y = 100;
;   29	int walking = 0;
;   30	int walkstep = 3;
;   31	int frames = 0;
;   32	int framemax = 16;
;   33	int godown;
;   34	int goleft;
;   35	int goup;
;   36	int goright;
	SEGMENT CODE
;   37	
;   38	extern int bullet_number;
;   39	extern gfx_tilemap_t tilemap;
;   40	//extern bullets_t bullets[];
;   41	
;   42	void mainloop() {
_mainloop:
;   43		do {
L_0:
;   44			
;   45			playerattack();
	CALL	_playerattack
;   46				gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   47					drawmap();
	CALL	_drawmap
;   48					drawplayer();
	CALL	_drawplayer
;   49					updatebullets();
	CALL	_updatebullets
;   50				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   51			keycheck();
	CALL	_keycheck
;   52			framecount();
	CALL	_framecount
;   53		} while (!(kb_Data[6] & kb_Clear));
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_0
;   54	}
	RET	


;**************************** _mainloop ***************************
;Name                         Addr/Register   Size   Type
;_framecount                         IMPORT  -----   function
;_keycheck                           IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_updatebullets                      IMPORT  -----   function
;_drawplayer                         IMPORT  -----   function
;_drawmap                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_playerattack                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   55	
;   56	void drawmap(){
_drawmap:
;   57		gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   58		gfx_Tilemap(&tilemap,tmp_pxl_x_offset,tmp_pxl_y_offset);
	LD	BC,(_tmp_pxl_y_offset)
	PUSH	BC
	LD	BC,(_tmp_pxl_x_offset)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   59		/*
;   60			gfx_SetTextFGColor(0xfe);
;   61			gfx_SetTextXY(0,0);
;   62			gfx_PrintInt(walking,1);
;   63		*/
;   64	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_tilemap                            IMPORT     18   variable
;_tmp_pxl_x_offset                   STATIC      3   variable
;_tmp_pxl_y_offset                   STATIC      3   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   65	void playerattack(){
_playerattack:
	LD	HL,-6
	CALL	__frameset
;   66		int n;
;   67		if (walking == 0){
	LD	HL,(_walking)
	CALL	__icmpzero
	JR	NZ,L_6
;   68			if (frames == framemax){
	LD	BC,(_framemax)
	LD	HL,(_frames)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_6
;   69				n = (bullet_number + 1);
	LD	BC,(_bullet_number)
	INC	BC
	LD	(IX+-3),BC
;   70				bullets[n].b_alive = 1;
	LD	HL,BC
	LD	A,18
	CALL	__imul_b
	LD	BC,_bullets
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	BC,1
	LD	(IY+3),BC
;   71				bullets[n].b_speed = 1;
	LD	(IY+6),BC
;   72				bullets[n].b_x = p_pxl_x;
	LD	BC,(_p_pxl_x)
	LD	(IY+15),C
	LD	(IY+16),B
;   73				bullets[n].b_y = p_pxl_y;
	LD	A,(_p_pxl_y)
	LD	(IY+17),A
;   74				bullets[n].b_vx = 1;
	LD	BC,1
	LD	(IY+9),BC
;   75				bullets[n].b_vy = 1;
	LD	(IY+12),BC
;   76			}
;   77		}
;   78	}	
L_6:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _playerattack ***************************
;Name                         Addr/Register   Size   Type
;_p_pxl_y                            STATIC      3   variable
;_p_pxl_x                            STATIC      3   variable
;_bullets                            IMPORT  unknown variable
;_bullet_number                      IMPORT      3   variable
;_framemax                           STATIC      3   variable
;_frames                             STATIC      3   variable
;_walking                            STATIC      3   variable
;n                                     IX-3      3   variable


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


;   79					  
;   80	void drawplayer(){
_drawplayer:
;   81		gfx_TransparentSprite(stickman,p_pxl_x,p_pxl_y);
	LD	BC,(_p_pxl_y)
	PUSH	BC
	LD	BC,(_p_pxl_x)
	PUSH	BC
	LD	BC,_stickman_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;   82	}
	RET	


;**************************** _drawplayer ***************************
;Name                         Addr/Register   Size   Type
;_stickman_data                      IMPORT    130   variable
;_p_pxl_x                            STATIC      3   variable
;_p_pxl_y                            STATIC      3   variable
;_gfx_TransparentSprite              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   83	void keycheck(){
_keycheck:
	LD	HL,-1
	CALL	__frameset
;   84		kb_Scan();
	CALL	_kb_Scan
;   85		
;   86		if ((kb_Data[7] & kb_Down)||(kb_Data[7] & kb_Left)||(kb_Data[7] & kb_Right)||(kb_Data[7] & kb_Up)){
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_11
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_11
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_11
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_12
L_11:
;   87			walking = 1;
	LD	BC,1
	LD	(_walking),BC
;   88		}
;   89		else {
	JR	L_15
L_12:
;   90			walking = 0;
	LD	BC,0
	LD	(_walking),BC
;   91		}
L_15:
;   92		if (kb_Data[7] & kb_Down) {
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_18
;   93			godown = 0;
	LD	BC,0
	LD	(_godown),BC
;   94			pcollisiondown();
	CALL	_pcollisiondown
;   95			if (godown == 1){p_pxl_y = (p_pxl_y + walkstep);}
	LD	BC,1
	LD	HL,(_godown)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_18
	LD	BC,(_walkstep)
	LD	HL,(_p_pxl_y)
	ADD	HL,BC
	LD	(_p_pxl_y),HL
;   96		}
L_18:
;   97		if (kb_Data[7] & kb_Left) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_21
;   98			goleft = 0;
	LD	BC,0
	LD	(_goleft),BC
;   99			pcollisionleft();
	CALL	_pcollisionleft
;  100			if (goleft == 1){p_pxl_x = (p_pxl_x - walkstep);}
	LD	BC,1
	LD	HL,(_goleft)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_21
	LD	HL,(_p_pxl_x)
	LD	BC,(_walkstep)
	OR	A,A
	SBC	HL,BC
	LD	(_p_pxl_x),HL
;  101		}
L_21:
;  102		if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_24
;  103			goup = 0;
	LD	BC,0
	LD	(_goup),BC
;  104			pcollisionup();
	CALL	_pcollisionup
;  105			if (goup == 1){p_pxl_y = (p_pxl_y - walkstep);}
	LD	BC,1
	LD	HL,(_goup)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_24
	LD	HL,(_p_pxl_y)
	LD	BC,(_walkstep)
	OR	A,A
	SBC	HL,BC
	LD	(_p_pxl_y),HL
;  106		}
L_24:
;  107		if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_25
;  108			goright = 0;
	LD	BC,0
	LD	(_goright),BC
;  109			pcollisionright();
	CALL	_pcollisionright
;  110			if (goright == 1){p_pxl_x = (p_pxl_x + walkstep);}
	LD	BC,1
	LD	HL,(_goright)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_25
	LD	BC,(_walkstep)
	LD	HL,(_p_pxl_x)
	ADD	HL,BC
	LD	(_p_pxl_x),HL
;  111		}
;  112			
;  113	}
L_25:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _keycheck ***************************
;Name                         Addr/Register   Size   Type
;_pcollisionright                    IMPORT  -----   function
;_goright                            STATIC      3   variable
;_pcollisionup                       IMPORT  -----   function
;_goup                               STATIC      3   variable
;_p_pxl_x                            STATIC      3   variable
;_pcollisionleft                     IMPORT  -----   function
;_goleft                             STATIC      3   variable
;_walkstep                           STATIC      3   variable
;_p_pxl_y                            STATIC      3   variable
;_pcollisiondown                     IMPORT  -----   function
;_godown                             STATIC      3   variable
;_walking                            STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;G_0                                   IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


;  114	void framecount(){
_framecount:
;  115		frames++;
	LD	BC,(_frames)
	INC	BC
	LD	(_frames),BC
;  116		if (frames > framemax) {frames = 0;}
	LD	HL,(_framemax)
	OR	A,A
	SBC	HL,BC
	JP	P,L_28
	LD	BC,0
	LD	(_frames),BC
L_28:
	RET	


;**************************** _framecount ***************************
;Name                         Addr/Register   Size   Type
;_framemax                           STATIC      3   variable
;_frames                             STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _tilemap:ROM
	XREF _bullet_number:ROM
	XREF _pcollisionright:ROM
	XREF _pcollisionup:ROM
	XREF _pcollisionleft:ROM
	XREF _pcollisiondown:ROM
	XREF _updatebullets:ROM
	XREF _bullets:ROM
	XREF _stickman_data:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_Tilemap:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _framecount
	XDEF _keycheck
	XDEF _drawplayer
	XDEF _playerattack
	XDEF _drawmap
	XDEF _mainloop
	XDEF _goright
	XDEF _goup
	XDEF _goleft
	XDEF _godown
	XDEF _framemax
	XDEF _frames
	XDEF _walkstep
	XDEF _walking
	XDEF _p_pxl_y
	XDEF _p_pxl_x
	XDEF _tmp_pxl_y_offset
	XDEF _tmp_pxl_x_offset
	END
