; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAINLOOP.C"
	.assume ADL=1
	SEGMENT DATA
_tmp_pxl_x_offset:
	DW	0
	DB	0
_tmp_pxl_y_offset:
	DW	0
	DB	0
_n:
	DW	0
	DB	0
_p_pxl_x:
	DW	100
	DB	0
_p_pxl_y:
	DW	100
	DB	0
_walking:
	DW	0
	DB	0
_walkstep:
	DW	3
	DB	0
_frames:
	DW	0
	DB	0
_framemax:
	DW	16
	DB	0
_visiblebullets:
	DW	0
	DB	0
	SEGMENT BSS
_godown:
	DS	3
_goleft:
	DS	3
_goup:
	DS	3
_goright:
	DS	3
	SEGMENT DATA
_p_projectile_speed:
	DW	1
	DB	0
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	
;    6	#include <math.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	#include <fileioc.h>
;   11	#include <graphx.h>
;   12	#include <keypadc.h>
;   13	
;   14	#include "main.h"
;   15	#include "gfx/tiles_gfx.h"
;   16	#include "gfx/archero_gfx.h"
;   17	#include "mainloop.h"
;   18	#include "structs.h"
;   19	#include "projectiles.h"
;   20	#include "p_collision.h"
;   21	
;   22	//tilemap pixel offsets
;   23	int tmp_pxl_x_offset = 0;
;   24	int tmp_pxl_y_offset = 0;
;   25	int n = 0;
;   26	
;   27	//player screen coordinates in pixels
;   28	int p_pxl_x = 100;
;   29	int p_pxl_y = 100;
;   30	int walking = 0;
;   31	int walkstep = 3;
;   32	int frames = 0;
;   33	int framemax = 16;
;   34	//int framemax = 0;
;   35	int visiblebullets = 0;
;   36	int godown;
;   37	int goleft;
;   38	int goup;
;   39	int goright;
;   40	int p_projectile_speed = 1;
	SEGMENT CODE
;   41	
;   42	extern int bullet_number;
;   43	extern int bullet_outside;
;   44	extern gfx_tilemap_t tilemap;
;   45	//extern bullets_t bullets[];
;   46	
;   47	void mainloop() {
_mainloop:
;   48		do {
L_0:
;   49			
;   50			playerattack();
	CALL	_playerattack
;   51				gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   52					drawmap();
	CALL	_drawmap
;   53					drawplayer();
	CALL	_drawplayer
;   54					updatebullets();
	CALL	_updatebullets
;   55				gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;   56			keycheck();
	CALL	_keycheck
;   57			framecount();
	CALL	_framecount
;   58		} while (!(kb_Data[6] & kb_Clear));
	LD	A,(16056348)
	AND	A,64
	JR	Z,L_0
;   59	}
	RET	


;**************************** _mainloop ***************************
;Name                         Addr/Register   Size   Type
;_framecount                         IMPORT  -----   function
;_keycheck                           IMPORT  -----   function
;_gfx_SwapDraw                       IMPORT  -----   function
;_updatebullets                      IMPORT  -----   function
;_drawplayer                         IMPORT  -----   function
;_drawmap                            IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_playerattack                       IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   60	
;   61	void drawmap(){
_drawmap:
;   62		gfx_FillScreen(0x00);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;   63		gfx_Tilemap(&tilemap,tmp_pxl_x_offset,tmp_pxl_y_offset);
	LD	BC,(_tmp_pxl_y_offset)
	PUSH	BC
	LD	BC,(_tmp_pxl_x_offset)
	PUSH	BC
	LD	BC,_tilemap
	PUSH	BC
	CALL	_gfx_Tilemap
	POP	BC
	POP	BC
	POP	BC
;   64		/*
;   65			gfx_SetTextFGColor(0xfe);
;   66			gfx_SetTextXY(0,0);
;   67			gfx_PrintInt(walking,1);
;   68		*/
;   69		gfx_SetTextFGColor(0xfe);
	LD	BC,254
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   70		gfx_SetTextXY(0,0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   71		gfx_PrintInt(visiblebullets,2);
	LD	BC,2
	PUSH	BC
	LD	BC,(_visiblebullets)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;   72		gfx_SetTextXY(0,10);
	LD	BC,10
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;   73		gfx_PrintInt(bullet_outside,1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_bullet_outside)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;   74	}
	RET	


;**************************** _drawmap ***************************
;Name                         Addr/Register   Size   Type
;_bullet_outside                     IMPORT      3   variable
;_visiblebullets                     STATIC      3   variable
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_tilemap                            IMPORT     18   variable
;_tmp_pxl_x_offset                   STATIC      3   variable
;_tmp_pxl_y_offset                   STATIC      3   variable
;_gfx_Tilemap                        IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   75	void playerattack(){
_playerattack:
	LD	HL,-18
	CALL	__frameset
;   76		
;   77		int random;
;   78		extern int user;
;   79		
;   80		if (walking == 0){
	LD	HL,(_walking)
	CALL	__icmpzero
	JR	NZ,L_19
;   81			if (frames == framemax){
	LD	BC,(_framemax)
	LD	HL,(_frames)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_19
;   82				if (bullet_number <= MAX_BULLETS){
	LD	BC,(_bullet_number)
	LD	HL,9
	OR	A,A
	SBC	HL,BC
	JP	M,L_19
;   83					if (visiblebullets <= MAX_BULLETS) {
	LD	BC,(_visiblebullets)
	LD	HL,9
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_19
;   84						
;   85						user = 1;
	LD	BC,1
	LD	(_user),BC
;   86						checkbullets();
	CALL	_checkbullets
;   87						
;   88							if (bullet_outside == 0){
	LD	HL,(_bullet_outside)
	CALL	__icmpzero
	JR	NZ,L_7
;   89								bullet_number++;
	LD	BC,(_bullet_number)
	INC	BC
	LD	(_bullet_number),BC
;   90								visiblebullets++;									
	LD	BC,(_visiblebullets)
	INC	BC
	LD	(_visiblebullets),BC
;   91								n = (bullet_number);
	LD	BC,(_bullet_number)
	LD	(_n),BC
;   92								bullets[n].b_alive = 1;
	LD	HL,(_n)
	LD	A,18
	CALL	__imul_b
	LD	BC,_bullets
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	BC,1
	LD	(IY+3),BC
;   93								bullets[n].b_speed = p_projectile_speed;
	LD	BC,(_p_projectile_speed)
	LD	(IY+6),BC
;   94								bullets[n].b_x = p_pxl_x;
	LD	BC,(_p_pxl_x)
	LD	(IY+15),C
	LD	(IY+16),B
;   95								bullets[n].b_y = p_pxl_y;
	LD	A,(_p_pxl_y)
	LD	(IY+17),A
;   96							}
L_7:
;   97									
;   98						//randomness is for testing only
;   99						//add enemy distance and required projectile velocities functions
;  100						random = (rand() % (4 - 0) + 0);
	CALL	_rand
	LD	BC,4
	CALL	__irems
	LD	(IX+-3),HL
;  101						if (random == 0) {
	CALL	__icmpzero
	JR	NZ,L_10
;  102							bullets[n].b_vx = -1;
	LD	HL,(_n)
	LD	A,18
	CALL	__imul_b
	LD	BC,_bullets
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	BC,16777215
	LD	(IY+9),BC
;  103							bullets[n].b_vy = -1;
	LD	(IY+12),BC
;  104						}
L_10:
;  105						if (random == 1) {
	LD	BC,1
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
;  106							bullets[n].b_vx = 1;
	LD	HL,(_n)
	LD	A,18
	CALL	__imul_b
	LD	BC,_bullets
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(IX+-12)
	LD	BC,1
	LD	(IY+9),BC
;  107							bullets[n].b_vy = -1;
	LD	BC,16777215
	LD	(IY+12),BC
;  108						}
L_12:
;  109						if (random == 2) {
	LD	BC,2
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_14
;  110							bullets[n].b_vx = 1;
	LD	HL,(_n)
	LD	A,18
	CALL	__imul_b
	LD	BC,_bullets
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	BC,1
	LD	(IY+9),BC
;  111							bullets[n].b_vy = 1;
	LD	(IY+12),BC
;  112						}
L_14:
;  113						if (random == 3) {
	LD	BC,3
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_19
;  114							bullets[n].b_vx = -1;
	LD	HL,(_n)
	LD	A,18
	CALL	__imul_b
	LD	BC,_bullets
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	IY,(IX+-18)
	LD	BC,16777215
	LD	(IY+9),BC
;  115							bullets[n].b_vy = 1;
	LD	BC,1
	LD	(IY+12),BC
;  116						}
;  117	
;  118					}
;  119				}
;  120			}
;  121		}
;  122	}	
L_19:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _playerattack ***************************
;Name                         Addr/Register   Size   Type
;_rand                               IMPORT  -----   function
;_p_pxl_y                            STATIC      3   variable
;_p_pxl_x                            STATIC      3   variable
;_p_projectile_speed                 STATIC      3   variable
;_bullets                            IMPORT  unknown variable
;_n                                  STATIC      3   variable
;_bullet_outside                     IMPORT      3   variable
;_checkbullets                       IMPORT  -----   function
;_user                               IMPORT      3   variable
;_visiblebullets                     STATIC      3   variable
;_bullet_number                      IMPORT      3   variable
;_framemax                           STATIC      3   variable
;_frames                             STATIC      3   variable
;_walking                            STATIC      3   variable
;random                                IX-3      3   variable


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


;  123					  
;  124	void drawplayer(){
_drawplayer:
;  125		gfx_TransparentSprite(stickman,p_pxl_x,p_pxl_y);
	LD	BC,(_p_pxl_y)
	PUSH	BC
	LD	BC,(_p_pxl_x)
	PUSH	BC
	LD	BC,_stickman_data
	PUSH	BC
	CALL	_gfx_TransparentSprite
	POP	BC
	POP	BC
	POP	BC
;  126	}
	RET	


;**************************** _drawplayer ***************************
;Name                         Addr/Register   Size   Type
;_stickman_data                      IMPORT    130   variable
;_p_pxl_x                            STATIC      3   variable
;_p_pxl_y                            STATIC      3   variable
;_gfx_TransparentSprite              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  127	void keycheck(){
_keycheck:
	LD	HL,-1
	CALL	__frameset
;  128		kb_Scan();
	CALL	_kb_Scan
;  129		
;  130		if ((kb_Data[7] & kb_Down)||(kb_Data[7] & kb_Left)||(kb_Data[7] & kb_Right)||(kb_Data[7] & kb_Up)){
	LD	A,(16056350)
	AND	A,1
	LD	(IX+-1),A
	OR	A,A
	JR	NZ,L_24
	LD	A,(16056350)
	AND	A,2
	JR	NZ,L_24
	LD	A,(16056350)
	AND	A,4
	JR	NZ,L_24
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_25
L_24:
;  131			walking = 1;
	LD	BC,1
	LD	(_walking),BC
;  132		}
;  133		else {
	JR	L_28
L_25:
;  134			walking = 0;
	LD	BC,0
	LD	(_walking),BC
;  135		}
L_28:
;  136		if (kb_Data[7] & kb_Down) {
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_31
;  137			godown = 0;
	LD	BC,0
	LD	(_godown),BC
;  138			pcollisiondown();
	CALL	_pcollisiondown
;  139			if (godown == 1){p_pxl_y = (p_pxl_y + walkstep);}
	LD	BC,1
	LD	HL,(_godown)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_31
	LD	BC,(_walkstep)
	LD	HL,(_p_pxl_y)
	ADD	HL,BC
	LD	(_p_pxl_y),HL
;  140		}
L_31:
;  141		if (kb_Data[7] & kb_Left) {
	LD	A,(16056350)
	AND	A,2
	JR	Z,L_34
;  142			goleft = 0;
	LD	BC,0
	LD	(_goleft),BC
;  143			pcollisionleft();
	CALL	_pcollisionleft
;  144			if (goleft == 1){p_pxl_x = (p_pxl_x - walkstep);}
	LD	BC,1
	LD	HL,(_goleft)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_34
	LD	HL,(_p_pxl_x)
	LD	BC,(_walkstep)
	OR	A,A
	SBC	HL,BC
	LD	(_p_pxl_x),HL
;  145		}
L_34:
;  146		if (kb_Data[7] & kb_Up) {
	LD	A,(16056350)
	AND	A,8
	JR	Z,L_37
;  147			goup = 0;
	LD	BC,0
	LD	(_goup),BC
;  148			pcollisionup();
	CALL	_pcollisionup
;  149			if (goup == 1){p_pxl_y = (p_pxl_y - walkstep);}
	LD	BC,1
	LD	HL,(_goup)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_37
	LD	HL,(_p_pxl_y)
	LD	BC,(_walkstep)
	OR	A,A
	SBC	HL,BC
	LD	(_p_pxl_y),HL
;  150		}
L_37:
;  151		if (kb_Data[7] & kb_Right) {
	LD	A,(16056350)
	AND	A,4
	JR	Z,L_38
;  152			goright = 0;
	LD	BC,0
	LD	(_goright),BC
;  153			pcollisionright();
	CALL	_pcollisionright
;  154			if (goright == 1){p_pxl_x = (p_pxl_x + walkstep);}
	LD	BC,1
	LD	HL,(_goright)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_38
	LD	BC,(_walkstep)
	LD	HL,(_p_pxl_x)
	ADD	HL,BC
	LD	(_p_pxl_x),HL
;  155		}
;  156			
;  157	}
L_38:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _keycheck ***************************
;Name                         Addr/Register   Size   Type
;_pcollisionright                    IMPORT  -----   function
;_goright                            STATIC      3   variable
;_pcollisionup                       IMPORT  -----   function
;_goup                               STATIC      3   variable
;_p_pxl_x                            STATIC      3   variable
;_pcollisionleft                     IMPORT  -----   function
;_goleft                             STATIC      3   variable
;_walkstep                           STATIC      3   variable
;_p_pxl_y                            STATIC      3   variable
;_pcollisiondown                     IMPORT  -----   function
;_godown                             STATIC      3   variable
;_walking                            STATIC      3   variable
;_kb_Scan                            IMPORT  -----   function
;G_0                                   IX-1      1   variable


; Stack Frame Size: 7 (bytes)
;       Spill Code: 0 (instruction)


;  158	void framecount(){
_framecount:
;  159		frames++;
	LD	BC,(_frames)
	INC	BC
	LD	(_frames),BC
;  160		if (frames > framemax) {frames = 0;}
	LD	HL,(_framemax)
	OR	A,A
	SBC	HL,BC
	JP	P,L_41
	LD	BC,0
	LD	(_frames),BC
L_41:
	RET	


;**************************** _framecount ***************************
;Name                         Addr/Register   Size   Type
;_framemax                           STATIC      3   variable
;_frames                             STATIC      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _user:ROM
	XREF _tilemap:ROM
	XREF _bullet_outside:ROM
	XREF _bullet_number:ROM
	XREF _pcollisionright:ROM
	XREF _pcollisionup:ROM
	XREF _pcollisionleft:ROM
	XREF _pcollisiondown:ROM
	XREF _checkbullets:ROM
	XREF _updatebullets:ROM
	XREF _bullets:ROM
	XREF _stickman_data:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_TransparentSprite:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_Tilemap:ROM
	XREF _rand:ROM
	XREF __irems:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _framecount
	XDEF _keycheck
	XDEF _drawplayer
	XDEF _playerattack
	XDEF _drawmap
	XDEF _mainloop
	XDEF _p_projectile_speed
	XDEF _goright
	XDEF _goup
	XDEF _goleft
	XDEF _godown
	XDEF _visiblebullets
	XDEF _framemax
	XDEF _frames
	XDEF _walkstep
	XDEF _walking
	XDEF _p_pxl_y
	XDEF _p_pxl_x
	XDEF _n
	XDEF _tmp_pxl_y_offset
	XDEF _tmp_pxl_x_offset
	END
